version: "3.9"

services:
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "81:80"
      - "1883:1883" # MQTT port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - mqtt-broker
    restart: always
    networks:
      - iot-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    env_file:
      - .env
    depends_on:
      - db
      - mqtt-broker
    restart: always
    networks:
      - iot-network
    volumes:
      - ./backend:/app/backend

  db:
    image: mariadb:10.6
    env_file:
      - .env
    volumes:
      - mariadb-data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    networks:
      - iot-network

  mqtt-broker:
    image: eclipse-mosquitto:2
    container_name: mqtt-broker
    ports:
      - "1884:1883"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/log:/mosquitto/log
    restart: always
    networks:
      - iot-network

  frontend:
    build:
      context: ./server/frontend
      dockerfile: Dockerfile
    restart: always
    networks:
      - iot-network
    ports:
    - "${FRONTEND_PORT:-80}:80"
    # Uncomment below if you need to run it with SSL certificate, and edit frontend/Dockerfile nginx command
    # volumes:
    #   - /etc/letsencrypt:/etc/letsencrypt
  web:
    build:
      context: ./server/api
      dockerfile: Dockerfile
    restart: always
    networks:
      - iot-network
    ports:
     - "5001:5001"
    depends_on:
      - redis
    # Uncomment below if you need to run it with SSL certificate, and edit api/Dockerfile gunicorn command
    # volumes:
    #   - /etc/letsencrypt:/etc/letsencrypt

  worker:
    privileged: true
    build:
      context: ./server/celery-queue
      dockerfile: Dockerfile
    environment:
      - TIME_LIMIT=${TIME_LIMIT:-20}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-password}
      - MYSQL_USER=${MYSQL_USER:-user}
      - CELERY_RESULT_EXPIRE=${CELERY_RESULT_EXPIRE:-86400}
    entrypoint: celery
    command: -A tasks worker --loglevel=info
    restart: always
    networks:
      - iot-network
    deploy:
      mode: replicated
      replicas: ${WORKER_NUMBERS:-1}
      resources:
        limits:
          memory: ${MAX_MEMORY_PER_DOCKER_WORKER:-500M}
    depends_on:
      - redis
      - mysql

  monitor:
    build:
      context: ./server/celery-queue
      dockerfile: Dockerfile
    ports:
     - "5555:5555"
    entrypoint: celery
    command:  -A tasks --broker=redis://redis:6379/0 flower --port=5555 --basic_auth=${FLOWER_USERNAME:-username}:${FLOWER_PASSWORD:-password} --max_tasks=${FLOWER_MONITOR_MAX_TASKS:-10000}
    depends_on:
      - redis
    networks:
      - iot-network

  redis:
    image: redis
    networks:
      - iot-network

  mysql:
    image: mysql:8.4
    restart: always
    networks:
      - iot-network
    command: --wait_timeout=600 --max_connections=2048
    environment:
      MYSQL_DATABASE: 'db'
      MYSQL_USER: ${MYSQL_USER:-user}
      MYSQL_PASSWORD:  ${MYSQL_PASSWORD:-password}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-password}
    ports:
      - '3306:3306'
    volumes:
      - ./server/init:/docker-entrypoint-initdb.d
      - ./server/db_data:/var/lib/mysql
    user: ${CURRENT_USER_ID:-1000}:${CURRENT_GROUP_ID:-1000}

networks:
  iot-network:
    driver: bridge

volumes:
  mariadb-data:
